<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>{{title}}</title>
    <link rel="stylesheet" type="text/css" href="/stylesheets/data-source.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  </head>
  <body>
    <h1>Data Sources</h1>
    <h2>Organisation: {{orgId}}</h2>
    <div class="main-container">
      <div class="data-container">
        <div id="dataSourcesList" class="data-sources-list">
          {{#each dataSources}}
            <div class="data-source-card" data-jws-token="{{this.jwsToken}}">
              <h3 class="data-source-subject">Data Sources</h3>
              <p><strong>ID:</strong> {{this.id}}</p>
              <p><strong>Schema:</strong> {{this.schemaId}}</p>
              <p><strong>Application ID:</strong> <span class="application-id">{{this.applicationId}}</span></p>
              <p><strong>Status:</strong> <span class="status {{this.status}}">{{this.status}}</span></p>
              <p><strong>Created By:</strong> {{this.createdBy}}</p>
              <p><strong>Created At:</strong> {{this.createdAt}}</p>
              <div class="card-buttons">
                <button class="refresh-button" onclick="refreshJWSToken('{{this.id}}')">Schedule JWS Refresh</button>
                <button class="verify-button" onclick="verifyJWSToken('{{this.jwsToken}}')">Verify JWS Token</button>
                <div class="icon-buttons-row">
                  <button class="icon-button edit-button" 
                          data-id="{{this.id}}" 
                          data-schema-id="{{this.schemaId}}" 
                          data-url="{{this.url}}" 
                          data-nonce="{{this.nonce}}" 
                          data-token-lifetime-minutes="{{this.tokenLifetimeMinutes}}" 
                          data-jws="{{this.jwsToken}}"
                          onclick="editDataSource(this)">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="icon-button delete-button" onclick="deleteDataSource('{{this.id}}')">
                    <i class="fas fa-trash-alt"></i>
                  </button>
                </div>
              </div>
            </div>
          {{/each}}
        </div>
      </div>
    </div>

    <!-- Plus Button for Adding New Data Source -->
    <button id="addDataSourceButton" class="add-button" onclick="openAddForm()">+</button>

    <!-- Edit/Add Data Source Modal -->
    <div id="editDataSourceModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeEditForm()">&times;</span>
        <form id="editForm">
          <h2 id="formTitle">Edit Data Source</h2>
          <input type="hidden" id="editDataSourceId" name="id">
          <label id="schemaIdLabel" for="schemaId">Schema ID:</label>
          <input type="text" id="schemaId" name="schemaId">
          <label for="url">URL:</label>
          <input type="text" id="editUrl" name="url" required>
          <label for="audience">Audience:</label>
          <input type="text" id="editAudience" name="audience" required>
          <label for="subject">Subject:</label>
          <input type="text" id="editSubject" name="subject" required>
          <label for="nonce">Nonce:</label>
          <input type="text" id="editNonce" name="nonce" required>
          <label for="tokenLifetimeMinutes">Token Lifetime (Minutes):</label>
          <input type="number" id="editTokenLifetimeMinutes" name="tokenLifetimeMinutes" required>
          <button type="submit" class="form-button">Save</button>
          <button type="button" class="form-button cancel-button" onclick="closeEditForm()">Cancel</button>
        </form>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        initializeDataSourceCards();
        setupFormSubmission();
        setupModalClose();
      });

      function initializeDataSourceCards() {
        const dataSourceCards = document.querySelectorAll('.data-source-card');
        dataSourceCards.forEach(card => {
          const jwsToken = card.getAttribute('data-jws-token');
          if (jwsToken) {
            try {
              const payload = decodeJWSToken(jwsToken);
              card.querySelector('.data-source-subject').textContent = payload.sub;
            } catch (error) {
              console.error('Error decoding JWS token:', error);
            }
          }
        });
      }

      function decodeJWSToken(jwsToken) {
        return JSON.parse(atob(jwsToken.split('.')[1]));
      }

      function openAddForm() {
        isEdit = false;
        setFormTitle('Add Data Source');
        resetForm();
        showElement('schemaId');
        showElement('schemaIdLabel');
        showModal('editDataSourceModal');
      }

      function editDataSource(button) {
        isEdit = true;
        currentId = button.getAttribute('data-id');
        currentSchemaId = button.getAttribute('data-schema-id');
        const jwsToken = button.getAttribute('data-jws');
        let payload;
        try {
          payload = decodeJWSToken(jwsToken);
        } catch (error) {
          console.error('Error decoding JWS token:', error);
          alert('Invalid JWS token');
          return;
        }
        setFormTitle('Update Data Source');
        resetForm();
        hideElement('schemaId');
        hideElement('schemaIdLabel');
        setFormValues({
          id: currentId,
          url: button.getAttribute('data-url'),
          audience: payload.aud,
          subject: payload.sub,
          nonce: button.getAttribute('data-nonce'),
          tokenLifetimeMinutes: button.getAttribute('data-token-lifetime-minutes')
        });
        showModal('editDataSourceModal');
      }

      function setFormTitle(title) {
        document.getElementById('formTitle').textContent = title;
      }

      function resetForm() {
        document.getElementById('editForm').reset();
      }

      function showElement(elementId) {
        document.getElementById(elementId).style.display = 'block';
      }

      function hideElement(elementId) {
        document.getElementById(elementId).style.display = 'none';
      }

      function setFormValues(values) {
        document.getElementById('editDataSourceId').value = values.id;
        document.getElementById('editUrl').value = values.url;
        document.getElementById('editAudience').value = values.audience;
        document.getElementById('editSubject').value = values.subject;
        document.getElementById('editNonce').value = values.nonce;
        document.getElementById('editTokenLifetimeMinutes').value = values.tokenLifetimeMinutes;
      }

      function showModal(modalId) {
        document.getElementById(modalId).style.display = 'block';
      }

      function closeEditForm() {
        hideElement('editDataSourceModal');
      }

      function setupFormSubmission() {
        document.getElementById('editForm').addEventListener('submit', function(event) {
          event.preventDefault();
          const id = document.getElementById('editDataSourceId').value;
          const schemaId = isEdit ? currentSchemaId : document.getElementById('schemaId').value;
          const dataSourcePayload = {
            schemaId,
            url: document.getElementById('editUrl').value,
            audience: document.getElementById('editAudience').value,
            subject: document.getElementById('editSubject').value,
            nonce: document.getElementById('editNonce').value,
            tokenLifetimeMinutes: document.getElementById('editTokenLifetimeMinutes').value,
          };
          const endpoint = isEdit ? `/api/data-source/update` : `/api/data-source/add`;
          submitForm(endpoint, isEdit ? { id, ...dataSourcePayload } : dataSourcePayload);
        });
      }

      function submitForm(endpoint, payload) {
        fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(payload)
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              throw new Error(data.error);
            }
            alert(`Data source ${isEdit ? 'updated' : 'added'} successfully`);
            location.reload();
          })
          .catch(error => {
            alert(`Error ${isEdit ? 'updating' : 'adding'} data source: ${error.message}`);
          });
      }

      function deleteDataSource(id) {
        fetch(`/api/data-source/delete/${id}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              throw new Error(data.error);
            }
            alert(`Data source with ID: ${id} deleted successfully`);
            location.reload();
          })
          .catch(error => {
            alert(`Error deleting data source with ID: ${id}: ${error.message}`);
          });
      }

      function refreshJWSToken(id) {
        fetch(`/api/data-source/refresh-token/${id}`, {
          method: 'POST'
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              throw new Error(data.error);
            }
            alert(`JWS token for data source with ID: ${id} refreshed successfully`);
            location.reload();
          })
          .catch(error => {
            alert(`Error refreshing JWS token for data source with ID: ${id}: ${error.message}`);
          });
      }

      function verifyJWSToken(jwsToken) {
        let payload;
        try {
          payload = decodeJWSToken(jwsToken);
        } catch (error) {
          console.error('Error decoding JWS token:', error);
          alert('Invalid JWS token');
          return;
        }
        fetch(`/api/data-source/verify-jws-token`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ jws: jwsToken })
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              throw new Error(data.error);
            }
            alert(`JWS token verified successfully for subject: ${payload.sub}`);
          })
          .catch(error => {
            alert(`Error verifying JWS token: ${error.message}`);
          });
      }

      function setupModalClose() {
        window.onclick = function(event) {
          const modal = document.getElementById('editDataSourceModal');
          if (event.target === modal) {
            closeEditForm();
          }
        }
      }
    </script>
  </body>
</html>